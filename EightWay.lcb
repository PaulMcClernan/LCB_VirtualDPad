
/**
This widget is an eight-way on-screen controller, a virtual D-pad like the ones found on game controllers.

Name: DPadOn
Type: message
Syntax: DPadOn pNumber
Summary: Sent when a virtual button is clicked.

Example:
on DPadOn pButtonNum
	put "DPadOn " & pButtonNum
end DPadOn

Description:
Handle the DPadOn message in the widget's object script to respond to clicks in the the virtual DPad.


Name: DPadOff
Type: message
Syntax: DPadOff pNumber
Summary: Sent when a virtual button is clicked.

Example:
on DPad pButtonNum
	put "DPadOff " & pButtonNum
end DPadOn

Description:
Handle the DPadOff message in the widget's object script to respond to release of the virtual DPad buttons
*/

-- declaring extension as widget, followed by identifier
widget org.openxtalk.widget.eightway

-- dependancy declarations
use com.livecode.canvas
use com.livecode.string
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.widgetutils

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "EightWay"
metadata author is "Paul McClernan"
metadata version is "0.1"
metadata preferredSize is "203.65,203.65"
-- metadata iconPath is
-- metadata svgicon is ""

private variable mColor as Color
private variable mHiliteColor as Color
private variable mObjectList as List
private variable mSelectedKeyList as List
private variable mSelectedKey as optional Array
-- private variable mBackgroundPath as Path

private variable mMaintainAspectRatio as Boolean

private variable mDeadZoneSize	as Number
property deadZoneSize	 get mDeadZoneSize	  set setDeadZoneSize
metadata deadZoneSize.editor is "com.livecode.pi.number"
-- metadata deadZoneSize.section is "Basic"
metadata deadZoneSize.label is "Dead Zone"
metadata deadZoneSize.step is "1"
metadata deadZoneSize.default is "25"
metadata deadZoneSize.min is "0.5"
metadata deadZoneSize.max is "50"
metadata deadZoneSize.section is "Basic"
private handler setDeadZoneSize(in pNumber as Number) returns nothing
   -- log pNumber
   if pNumber <51 then
   	put pNumber into mDeadZoneSize
	else
	   put 50 into mDeadZoneSize
	end if
	OnGeometryChanged()
   -- redraw all
end handler

property iconHiliteColor      get getHiliteColor    set setHiliteColor
metadata iconHiliteColor.editor is "com.livecode.pi.color"
metadata iconHiliteColor.section is "Colors"

private variable mBorderWidth as Number
property borderWidth get mBorderWidth  set setBorderWidth
metadata borderWidth.editor is "com.livecode.pi.number"
metadata borderWidth.label is "Border width"
metadata borderWidth.step is "0.5"
metadata borderWidth.default is "2"
metadata borderWidth.min is "0.5"
metadata borderWidth.max is "25"
public handler setBorderWidth(in pBorderWidth as Number) returns nothing
   put pBorderWidth into mBorderWidth
   OnGeometryChanged()
   redraw all
end handler

public variable mSelectedDPad as Number
property selectedDPad      get getSelectedDPad    set setSelectedDPad
metadata selectedDPad.editor is "com.livecode.pi.string"

private handler getSelectedDPad() returns String
   return mSelectedKey["index"] formatted as string
end handler
private handler setSelectedDPad(in pSelect as String)
   variable tObject as Array
   variable tIndex as Number
   --  put pSelect into mSelectedDPad
  put pSelect parsed as number into tIndex
  put tIndex into mSelectedDPad
  log tIndex
  if tIndex > 0 and tIndex < 9 then
		if mSelectedKey is not nothing then
         if tIndex is not mSelectedKey["index"] then
            put tIndex into mSelectedKey["index"]
            put element tIndex of mObjectList into tObject
            post "DPadOff" with [ mSelectedKey["position"] , mSelectedKey["name"]]
	      -- post "DPadOff" to my script object with [ mSelectedKey["position"] , mSelectedKey["name"]]
	         put false into tObject["hilighted"]
	         put tObject into element (mSelectedKey["index"]) of mObjectList
	         put nothing into mSelectedKey
         end if
	   end if
		put element tIndex of mObjectList into tObject
		-- put tObject["circleSlice"] into tPath
		put true into tObject["hilighted"]
		put tObject into element pSelect of mObjectList
		post "DPadOn" with [ tObject["position"] ,tObject["name"]]
		-- post "DPad" to my script object with [ mObject["position"] ,mObject["name"]]
		put tObject into mSelectedKey
		put tIndex into mSelectedKey["index"]
		-- OnGeometryChanged()
		redraw all
	end if
end handler

--------------------------------------------------------------------------------------------------------------
--- called when widget is created
public handler OnCreate()
	-- put path "" into mBackgroundPath
	put color [0,0,0] into mColor
	put stringToColor("0,255,0") into mHiliteColor
	put false into mMaintainAspectRatio
   put false into mMouseButtonIsDown
   OnGeometryChanged()
end handler

public handler OnGeometryChanged()
      variable tPath as Path
      --- SVG ViewBox Rect --
      variable tViewBoxRect as Rectangle
		-- rectangle [ tLeft, tTop, tRight,tBottom ]
      put rectangle [0,0,203.65,203.65] into tViewBoxRect
		-- put rectangle [0,0,204,204] into tViewBoxRect

		variable tScaleHoriz as Integer
		variable tScaleVert as Integer
		put the width of my rectangle / the right of tViewBoxRect into tScaleHoriz
		put the height of my rectangle / the bottom of tViewBoxRect into tScaleVert

      -- set the right of tViewBoxRect to (the right of tViewBoxRect * tScaleHoriz)
      -- set the bottom of tViewBoxRect to (the right of tViewBoxRect * tScaleVert)
      -- log [tScaleHoriz]
      -- log [tScaleVert]
   	-------------------------------------------- Build Object List --------------------------------------------
		----------------------------------------- Up ------------------------------------------------------
		variable tArray as Array
		put the empty list into mObjectList

		put the empty array into tArray

		put "Up" into tArray["name"]
   	put path "M101.82,101.82L74.27,35.3c8.49-3.52,17.79-5.47,27.56-5.47s19.07,1.95,27.55,5.47 L101.82,101.82L101.82,101.82z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		-- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
      put tPath into tArray["circleSlice"]

		put path "M131.65,29.82 L131.65,29.82L131.65,29.82L131.65,29.82l-2.27,5.47c-8.49-3.52-17.79-5.47-27.55-5.47s-19.07,1.95-27.56,5.47 " &\
			 "c0,0-2.27-5.47-2.27-5.47c0,0,0,0,0,0c0,0,0,0,0,0l0,0L101.82,0L131.65,29.82z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		-- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
		put tPath into tArray["DArrow"]

		put false into tArray["hilighted"]
   	put 0 into tArray["position"]

   	push tArray onto mObjectList
		----------------------------------------- UpRight -------------------------------------------------
		put the empty array into tArray

   	put "UpRight" into tArray["name"]
   	put path "M152.75,50.93 c-0.01-0.01-0.02-0.02-0.03-0.03L152.75,50.93c6.63,6.63,11.96,14.55,15.6,23.34c0,0-66.53,27.56-66.53,27.56l27.56-66.53 c8.79,3.65,16.71,8.98,23.34,15.6" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
      -- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
      put tPath into tArray["circleSlice"]
   	put false into tArray["hilighted"]
   	put 1 into tArray["position"]

		put path "M152.74,50.91 c6.9,6.9,12.1,14.86,15.62,23.36l5.47-2.27l0,0c0,0,0,0,0,0l0,0l-5.47,2.27l5.47-2.27c0,0,0-42.17,0-42.17l-42.17,0v0c0,0,0,0,0,0 c0,0,0,0,0,0l-2.27,5.47C137.87,38.81,145.83,44.01,152.74,50.91z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		put tPath into tArray["DArrow"]

		push tArray onto mObjectList
		--------------------------------------- Right ----------------------------------------
		put the empty array into tArray

   	put  "Right" into tArray["name"]
   	put path "M101.82,101.82L101.82,101.82c0,0,66.53-27.56,66.53-27.56c3.52,8.49,5.47,17.79,5.47,27.56 " &\
        "s-1.95,19.07-5.47,27.56C168.35,129.38,101.82,101.83,101.82,101.82C101.82,101.82,101.82,101.82,101.82,101.82L101.82,101.82 " & \
        "L101.82,101.82L101.82,101.82C101.82,101.82,101.82,101.82,101.82,101.82L101.82,101.82L101.82,101.82L101.82,101.82z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
      -- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
      put tPath into tArray["circleSlice"]
   	put false into tArray["hilighted"]
   	put 2 into tArray["position"]

		put path "M173.82,101.82 c0,9.76-1.95,19.07-5.47,27.56l5.47,2.27l0,0c0,0,0,0,0,0v0l-5.47-2.27l5.47,2.27l29.82-29.82L173.82,72v0l0,0c0,0,0,0,0,0 " & \
		  "l-5.47,2.27C171.87,82.76,173.82,92.06,173.82,101.82z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		put tPath into tArray["DArrow"]

   	push tArray onto mObjectList
		-------------------------------------- Right Down ---------------
		put the empty array into tArray

   	put "DownRight" into tArray["name"]
   	put path "M101.82,101.83l27.56,66.53c8.79-3.64,16.7-8.97,23.33-15.59l0.05-0.05c-0.02,0.02-0.03,0.03-0.05,0.05l0.05-0.05 c6.62-6.63,11.95-14.54,15.59-23.33L101.82,101.83z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
      -- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
      put tPath into tArray["circleSlice"]
   	put false into tArray["hilighted"]
   	put 3 into tArray["position"]

		put path "M131.65,173.82h42.18l0-42.18l0,0 l0,0l0,0l-5.47-2.27l5.47,2.27l-5.47-2.27c-3.51,8.49-8.71,16.45-15.61,23.35c-6.9,6.9-14.86,12.1-23.36,15.62L131.65,173.82 L131.65,173.82L131.65,173.82L131.65,173.82" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		put tPath into tArray["DArrow"]

   	push tArray onto mObjectList
		---------------------------------------- Down -----------------------
		put the empty array into tArray

   	put "Down" into tArray["name"]
   	put path "M101.82,173.82c-9.76,0-19.07-1.95-27.56-5.47l27.56-66.53l0,0l27.56,66.53 C120.89,171.87,111.59,173.82,101.82,173.82z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
      -- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
      put tPath into tArray["circleSlice"]
   	put false into tArray["hilighted"]
   	put 4 into tArray["position"]

		put path "M72,173.82 l29.82,29.82l29.82-29.82l0,0h0l0,0l-2.27-5.47l2.27,5.47l-2.27-5.47c-8.49,3.52-17.79,5.47-27.56,5.47 " & \
		  "c-9.76,0-19.07-1.95-27.56-5.47L72,173.82C72,173.82,72,173.82,72,173.82L72,173.82C72,173.82,72,173.82,72,173.82z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		put tPath into tArray["DArrow"]

   	push tArray onto mObjectList
		-------------------------------------------- DownLeft -------------------------------
		put the empty array into tArray

   	put "DownLeft" into tArray["name"]
   	put path "M35.3,129.38 c7.3,17.6,21.37,31.67,38.97,38.97l27.56-66.53L35.3,129.38z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
      -- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
      put tPath into tArray["circleSlice"]
   	put false into tArray["hilighted"]
   	put 5 into tArray["position"]

		put path "M72,173.82H29.82v-42.18 M72,173.82l2.27-5.47 M29.82,131.65L29.82,131.65C29.83,131.65,29.82,131.65,29.82,131.65C29.83,131.65,29.82,131.65,29.82,131.65" & \
			"c0,0,5.48-2.27,5.48-2.27c3.51,8.49,8.71,16.45,15.61,23.36s14.86,12.1,23.35,15.61L72,173.82l0,0" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		put tPath into tArray["DArrow"]

   	push tArray onto mObjectList
		------------------------------------------- Left --------------------------------------------
		put the empty array into tArray

   	put "Left" into tArray["name"]
   	put path "M101.82,101.82L101.82,101.82C101.82,101.82,101.82,101.82,101.82,101.82 " & \
         "C101.82,101.83,101.82,101.82,101.82,101.82C101.82,101.82,101.82,101.82,101.82,101.82C101.82,101.82,101.82,101.82,101.82,101.82 " & \
         "C101.82,101.83,101.82,101.82,101.82,101.82L101.82,101.82L35.3,74.27c-3.52,8.49-5.47,17.79-5.47,27.56s1.95,19.07,5.47,27.56 " & \
         "C35.3,129.38,101.82,101.82,101.82,101.82L101.82,101.82" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
      -- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
         put tPath into tArray["circleSlice"]
   	put false into tArray["hilighted"]
   	put 6 into tArray["position"]

		put path "M29.82,131.65 L0,101.82L29.82,72 M29.82,131.65l5.47-2.27 M29.82,72L29.82,72C29.82,72,29.82,72,29.82,72C29.82,72,29.82,72,29.82,72 " &\
			"c0,0,5.47,2.27,5.47,2.27c-3.52,8.49-5.47,17.79-5.47,27.56s1.95,19.07,5.47,27.56l-5.47,2.27c0,0,0,0,0,0" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		put tPath into tArray["DArrow"]

   	push tArray onto mObjectList
		---------------------------------------- LeftUp ---------------------------------------------
		put the empty array into tArray

   	put "LeftUp" into tArray["name"]
   	put path "M101.82,101.82 L35.3,74.27c7.3-17.6,21.37-31.67,38.97-38.97L101.82,101.82L101.82,101.82z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
      -- scale tPath by [ my width / the right of tViewBoxRect, my height/the bottom of tViewBoxRect]
      put tPath into tArray["circleSlice"]
   	put false into tArray["hilighted"]
   	put 7 into tArray["position"]

		put path "M72,29.82L72,29.82L72,29.82 L72,29.82l2.27,5.47c-8.49,3.51-16.45,8.71-23.35,15.61c-6.9,6.9-12.1,14.86-15.61,23.36c0,0-5.47-2.27-5.47-2.27c0,0,0,0,0,0 c0,0,0,0,0,0l0,0l0-42.18H72z" into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]
		put tPath into tArray["DArrow"]

   	push tArray onto mObjectList
		-------------------------------
		put the empty array into tArray

		put "DeadZone" into tArray["name"]
		put circle path centered at point [(the right of tViewBoxRect) / 2  ,(the bottom of tViewBoxRect) / 2  ] with radius mDeadZoneSize into tPath
		scale tPath by [ tScaleHoriz , tScaleVert]

		put tPath into tArray["circleSlice"]
		put 8 into tArray["position"]
		put false into tArray["hilighted"]
		push tArray onto mObjectList

      redraw all
end handler

-- called whenever LiveCode needs to redraw the widget
public handler OnPaint()
	variable tPath as Path
	variable tObject as Array
		------------------------------------------------------------------------------------------------------------------ Up
	put element 1 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth
   stroke tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ UpRight
	put element 2 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth
   stroke tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ Right
	put element 3 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth
   stroke tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ RightDown
	put element 4 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth

   stroke tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ Down
	put element 5 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth
   stroke tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ DownLeft
	put element 6 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth
   stroke tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ Left
	put element 7 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
	put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth
   stroke tPath on this canvas
	------------------------------------------------------------------------------------------------------------------ LeftUp
	put element 8 of mObjectList into tObject
	if tObject["hilighted"] then
		set the paint of this canvas to solid paint with color [0,0,0,1]
		put tObject["DArrow"] into tPath
		fill tPath on this canvas
		set the paint of this canvas to solid paint with mHiliteColor
	else
		set the paint of this canvas to solid paint with color [1,1,1,1]
	end if
   put tObject["circleSlice"] into tPath
	fill tPath on this canvas
   set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth
   stroke tPath on this canvas

	------------------------------------------------------------------------------------------------------------------ DeadZone
	put element 9 of mObjectList into tObject
	set the paint of this canvas to solid paint with color [1,1,1,1]
	put tObject["circleSlice"] into tPath
   -- translate tPath by [ - (mBorderWidth/2), - (mBorderWidth /2) ]
	fill tPath on this canvas
	set the paint of this canvas to solid paint with color [0,0,0,1]
   set the stroke width of this canvas to mBorderWidth

	stroke tPath on this canvas

end handler
-- this handler is called when the widget is saved
public handler OnSave(out rProperties as Array)
	-- put colorToString(mColor, true) into rProperties["color"]
end handler
-- this handler is called when the widget is loaded
public handler OnLoad(in pProperties as Array)
	-- put stringToColor(pProperties["color"]) into mColor
   -- put stringToColor(pProperties["hilite color"]) into mHiliteColor
end handler

----------------------------------------------------------------------------------------------------
public variable mMouseButtonIsDown as Boolean

public handler OnMouseUp()
   put false into  mMouseButtonIsDown
   --- execute script "global gPianoMouseButtonDown ; put false into gPianoMouseButtonDown"
   if mSelectedKey is not nothing then
     variable tPath as Path
     variable tObject as Array
     put mSelectedKey["circleSlice"] into tPath
     post "DPadOff" with [ mSelectedKey["position"] , mSelectedKey["name"]]
    --  post "DPadOff" to my script object with [ mSelectedKey["position"] , mSelectedKey["name"]]
     put element mSelectedKey["index"] of mObjectList into tObject
     put false into tObject["hilighted"]
     put tObject into element (mSelectedKey["index"]) of mObjectList
     put nothing into mSelectedKey
  end if
  redraw all
  post "mouseUp" with [the click button]
 -- post "mouseUp" to my script object with [the click button]
end handler

public handler OnMouseCancel()
      -- put false into gPianoMouseButtonDown
      --- execute script "global gPianoMouseButtonDown ; put false into gPianoMouseButtonDown"
	--redraw all
end handler

public handler OnMouseEnter()
   --put false into gPianoMouseButtonDown
   --execute script "global gPianoMouseButtonDown ; return gPianoMouseButtonDown"
   --put the result into gPianoMouseButtonDown
   -- log gPianoMouseButtonDown
end handler

public handler OnMouseDown()
	variable tObject as Array
	variable tPath as Path
	variable tIndex as Integer
   put true into mMouseButtonIsDown
   -- execute script "global gPianoMouseButtonDown ; put true into gPianoMouseButtonDown"
   if mSelectedKey is not nothing then
      put mSelectedKey["circleSlice"] into tPath
      if hitTestPath( the mouse position, tPath, 0, true) is false then
         post "DPadOff" with [ mSelectedKey["position"] , mSelectedKey["name"]]
         -- post "DPadOff" to my script object with [ mSelectedKey["position"] , mSelectedKey["name"]]
         put element mSelectedKey["index"] of mObjectList into tObject
         put false into tObject["hilighted"]
         put tObject into element (mSelectedKey["index"]) of mObjectList

         put nothing into mSelectedKey
      end if
   end if
	put element 9 of mObjectList into tObject -- DeadZone
	put tObject["circleSlice"] into tPath
	if hitTestPath( the mouse position, tPath, 0, true) then
		post "mouseDown" with [the click button]
		repeat with tIndex from 1 up to 8
			 put element tIndex of mObjectList into tObject
			 put tObject["circleSlice"] into tPath
			 put false into tObject["hilighted"]
			 put tObject into element tIndex of mObjectList
		 end repeat
	else
		repeat with tIndex from 1 up to 8
		   put element tIndex of mObjectList into tObject
		   put tObject["circleSlice"] into tPath
		   if hitTestPath( the mouse position, tPath, 0, true) then
		      put true into tObject["hilighted"]
		      put tObject into element tIndex of mObjectList
		      post "DPadOn" with [ tObject["position"] ,tObject["name"]]
		      -- post "DPad" to my script object with [ mObject["position"] ,mObject["name"]]
		      put tObject into mSelectedKey
		      put tIndex into mSelectedKey["index"]
		      -- put "white" into mSelectedKey["keycolor"]
		   else
		      put false into tObject["hilighted"]
		      put tObject into element tIndex of mObjectList
		   end if
		end repeat
	end if
	redraw all
	post "mouseDown" with [the click button]
end handler

public handler OnMouseMove() returns optional any
   variable tMouseDown as Boolean
	-- variable tXMousePos as Real
	-- variable tYMousePos as Real
	-- variable tReturnStr as String
	-- put the x of the mouse position into tXMousePos
	-- put the y of the mouse position into tYMousePos
	-- if tYMousePos < 0 then
   -- put 0 into tYMousePos
	-- end if
	--put tXMousePos formatted as string & "," & tYMousePos formatted as string into tReturnStr
	--post "mouseMove" && tReturnStr
   if mMouseButtonIsDown then
	   variable tObject as Array
	   variable tPath as Path
	   variable tIndex as Integer

	   if mSelectedKey is not nothing then
	      put mSelectedKey["circleSlice"] into tPath
	      if hitTestPath( the mouse position, tPath, 0, true) is false then
	         post "DPadOff" with [ mSelectedKey["position"] , mSelectedKey["name"]]
	         -- post "DPadOff" to my script object with [ mSelectedKey["position"] , mSelectedKey["name"]]
	         put element mSelectedKey["index"] of mObjectList into tObject
	         put false into tObject["hilighted"]
	         put tObject into element (mSelectedKey["index"]) of mObjectList
	         put nothing into mSelectedKey
	      end if
	   end if

		put element 9 of mObjectList into tObject -- DeadZone
		put tObject["circleSlice"] into tPath
		if hitTestPath( the mouse position, tPath, 0, true) then
			post "mouseDown" with [the click button]
			repeat with tIndex from 1 up to 9
				 put element tIndex of mObjectList into tObject
				 put tObject["circleSlice"] into tPath
				 put false into tObject["hilighted"]
				 put tObject into element tIndex of mObjectList
				 post "DPadOn" with [ tObject["position"] ,tObject["name"]]
			 end repeat
		else
		   repeat with tIndex from 1 up to 8
		      put element tIndex of mObjectList into tObject
		      put tObject["circleSlice"] into tPath
		      if hitTestPath( the mouse position, tPath, 0, true) then
		         put true into tObject["hilighted"]
		         put tObject into element tIndex of mObjectList
		         post "DPadOn" with [ tObject["position"] ,tObject["name"]]
		         -- post "DPadOn" to my script object with [ mObject["position"] ,mObject["name"]]

		         put tObject into mSelectedKey
		         put tIndex into mSelectedKey["index"]
		         -- put "white" into mSelectedKey["keycolor"]
		      else
		         put false into tObject["hilighted"]
		         put tObject into element tIndex of mObjectList
		      end if
		   end repeat
		end if
		redraw all
	end if
 end handler

----------------------------------------------------------------------------------------------------

public handler setMaintainAspectRatio(in pBoolean as Boolean)
	put pBoolean into mMaintainAspectRatio
	redraw all
end handler

public handler setColor(in pColor as String) returns nothing
	put stringToColor(pColor) into mColor
	redraw all
end handler

public handler getColor() returns String
	return colorToString(mColor, false)
end handler

public handler setHiliteColor(in pColor as String) returns nothing
	put stringToColor(pColor) into mHiliteColor
	redraw all
end handler

public handler getHiliteColor() returns String
	return colorToString(mHiliteColor, false)
end handler

--- Monte's point-within-path handler:
public handler hitTestPath(in pPoint as Point, in pPath as Path, in pStrokeWidth as Number, in pWithin as Boolean) returns Boolean
	-- set pWithin true and pStrokeWidth to 0 if you want to hit-test the filled path
	-- set pWithin false and pStrokeWidth != 0 if you want hit-test the stroked path (i.e. just the outline)
	-- set pWithin true and pStrokeWidth != 0 if you want to hit-test the stroked and filled path.
	------------------------------------------------------------------------------------------------------------------------------
	-- create a 1 x 1 canvas
	variable tCanvas as Canvas
	put a new canvas with size [1,1] into tCanvas
	-- ensure we either get pixels drawn with our color or not drawn
	set the antialias of tCanvas to false
	-- translate the path by the point
	translate pPath by [-(the x of pPoint), -(the y of pPoint)]
	-- draw the path to the canvas
	set the paint of tCanvas to solid paint with color [0.0, 0.0, 0.0, 1.0]
	if pStrokeWidth is 0 and not pWithin then
		put 1 into pStrokeWidth
	end if
	if pWithin then
		fill pPath on tCanvas
	end if
	if pStrokeWidth > 0 then
		set the stroke width of tCanvas to pStrokeWidth
		stroke pPath on tCanvas
	end if
	-- get the pixel data of the canvas
	variable tData as Data
	put the pixel data of tCanvas into tData
	-- return whether pixel is opaque
	return the first byte of tData is the byte with code 255
end handler

-- Translated from some Skia code
public handler scaleAndMaintainAspectRatioTransform(in pSrcBounds as Rectangle, in pDestBounds as Rectangle, in pConstraintBounds as Rectangle) returns Transform
   // Prepare values for matrix transformation
   variable isLarger as Boolean
   variable sX as Number
   variable sY as Number

   put false into isLarger
   put the width of pDestBounds / the width of pSrcBounds into sX
   put the height of pDestBounds / the height of pSrcBounds into sY

   if sX > sY then
      put true into isLarger
      put sY into sX
   else
      put sX into sY
   end if

   variable tX as Number
   variable tY as Number

   put the left of pDestBounds - (the left of pSrcBounds*sX) into tX
   put the top of pDestBounds - (the top of pSrcBounds*sY) into tY

   variable tDiff as Number

   if isLarger then
      put the width of pConstraintBounds - (the width of pSrcBounds*sY) into tDiff
   else
      put the height of pConstraintBounds - (the height of pSrcBounds*sY) into tDiff
   end if

   // align center
   divide tDiff by 2

   if isLarger then
      add tDiff to tX
   else
      add tDiff to tY
   end if

   // create transformation matrix and apply
   variable tTransform as Transform
   put transform with matrix [sX, 0, 0, sY, tX, tY] into tTransform

   return tTransform
end handler

end widget
